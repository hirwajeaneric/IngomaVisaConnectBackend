generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String            @id @default(uuid())
  email                String            @unique
  password             String
  name                 String
  role                 Role
  avatar               String?
  phone                String?
  isActive             Boolean           @default(false)
  createdAt            DateTime          @default(now())
  lastLoginAt          DateTime?
  passwordResetToken   String?
  passwordResetExpires DateTime?
  twoFactorEnabled     Boolean           @default(false)
  twoFactorSecret      String?
  department           String?
  title                String?
  permissions          String[]
  applications         VisaApplication[]
  otps                 OTP[]
  auditLogs            AuditLog[]
  personalInfo         PersonalInfo?
  payments             Payment[]
  interviews           Interview[]
  notifications        Notification[]

  @@index([email])
}

model OTP {
  id        String   @id @default(uuid())
  email     String
  otp       String
  createdAt DateTime @default(now())
  expiresAt DateTime
  used      Boolean  @default(false)
  user      User     @relation(fields: [email], references: [email])

  @@index([email])
}

model AuditLog {
  id         String   @id @default(uuid())
  email      String
  userRole   String
  action     String
  entityType String
  details    Json
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [email], references: [email])

  @@index([email])
  @@index([action])
  @@index([createdAt])
}

model VisaType {
  id                String            @id @default(uuid())
  name              String
  slug              String            @unique
  description       String?
  price             Float
  processingTime    String
  duration          String
  requirements      String[]
  eligibleCountries String[]
  coverImage        String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  isActive          Boolean           @default(true)
  applications      VisaApplication[]
}

model VisaApplication {
  id                String         @id @default(uuid())
  applicationNumber String         @unique
  user              User           @relation(fields: [userId], references: [id])
  userId            String
  visaType          VisaType       @relation(fields: [visaTypeId], references: [id])
  visaTypeId        String
  status            Status
  submissionDate    DateTime?
  decisionDate      DateTime?
  expiryDate        DateTime?
  rejectionReason   String?
  personalInfo      PersonalInfo?  @relation(fields: [personalInfoId], references: [id])
  personalInfoId    String?        @unique
  travelInfo        TravelInfo?    @relation(fields: [travelInfoId], references: [id])
  travelInfoId      String?        @unique
  documents         Document[]
  payment           Payment?       @relation(fields: [paymentId], references: [id])
  paymentId         String?        @unique
  interviews        Interview[]
  notifications     Notification[]
  fundingSource     String?
  monthlyIncome     Float?

  @@index([userId])
  @@index([status])
  @@index([applicationNumber])
}

model PersonalInfo {
  id                     String           @id @default(uuid())
  user                   User             @relation(fields: [userId], references: [id])
  userId                 String           @unique
  firstName              String
  lastName               String
  dateOfBirth            DateTime
  nationality            String
  passportNumber         String           @unique
  passportIssueDate      DateTime
  passportExpiryDate     DateTime
  passportIssuingCountry String
  gender                 String
  email                  String
  phone                  String
  maritalStatus          String?
  address                String
  currentAddress         String?
  occupation             String?
  employerDetails        String?
  city                   String
  country                String
  postalCode             String?
  application            VisaApplication?

  @@index([userId])
  @@index([passportNumber])
}

model TravelInfo {
  id                             String           @id @default(uuid())
  application                    VisaApplication?
  purposeOfTravel                String
  entryDate                      DateTime
  exitDate                       DateTime
  previousVisits                 Boolean
  intendedEntryDate              DateTime
  intendedExitDate               DateTime
  portOfEntry                    String?
  accommodationDetails           String?
  travelItinerary                String?
  previousVisitDetails           String?
  hostDetails                    String?
  finalDestination               String?
  countriesVisitedOfAfterBurundi String?

  @@index([id])
}

model Document {
  id                 String             @id @default(uuid())
  application        VisaApplication    @relation(fields: [applicationId], references: [id])
  applicationId      String
  documentType       String // Changed to simple string field
  fileName           String
  filePath           String
  fileSize           Int
  uploadDate         DateTime           @default(now())
  verificationStatus VerificationStatus @default(PENDING)
  verifiedBy         String?
  verifiedAt         DateTime?
  rejectionReason    String?

  @@index([applicationId])
  @@index([verificationStatus])
}

model Payment {
  id              String           @id @default(uuid())
  application     VisaApplication?
  user            User             @relation(fields: [userId], references: [id])
  userId          String
  amount          Float
  currency        String           @default("USD")
  paymentStatus   PaymentStatus
  stripePaymentId String?          @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  refundStatus    RefundStatus?
  refundReason    String?

  @@index([userId])
  @@index([paymentStatus])
  @@index([stripePaymentId])
}

model Interview {
  id            String          @id @default(uuid())
  application   VisaApplication @relation(fields: [applicationId], references: [id])
  applicationId String
  officer       User            @relation(fields: [officerId], references: [id])
  officerId     String
  scheduledDate DateTime
  location      String
  status        InterviewStatus
  notes         String?
  outcome       String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([applicationId])
  @@index([officerId])
  @@index([status])
}

model Notification {
  id            String           @id @default(uuid())
  user          User             @relation(fields: [userId], references: [id])
  userId        String
  application   VisaApplication? @relation(fields: [applicationId], references: [id])
  applicationId String?
  type          NotificationType
  message       String
  isRead        Boolean          @default(false)
  createdAt     DateTime         @default(now())

  @@index([userId])
  @@index([applicationId])
  @@index([type])
}

enum Role {
  APPLICANT
  OFFICER
  ADMIN
}

enum Status {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  SUBMITTED
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum RefundStatus {
  PENDING
  APPROVED
  REJECTED
}

enum InterviewStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum NotificationType {
  APPLICATION_SUBMITTED
  APPLICATION_STATUS_UPDATED
  INTERVIEW_SCHEDULED
  PAYMENT_COMPLETED
  DOCUMENT_REQUIRED
  SYSTEM_ALERT
}
